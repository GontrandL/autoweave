name: Dependabot Advanced Auto-Merge

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  workflow_run:
    workflows: ["Monorepo CI/CD", "Security Scan"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login == 'dependabot[bot]' || github.actor == 'dependabot[bot]'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Fetch Dependabot metadata
        id: dependabot
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          
      - name: Check CI status
        id: ci-status
        run: |
          # Wait for CI to complete
          sleep 30
          
          # Check if all required checks have passed
          PR_NUMBER="${{ github.event.pull_request.number }}"
          if [ -z "$PR_NUMBER" ]; then
            PR_NUMBER=$(echo $GITHUB_REF | awk -F'/' '{print $3}')
          fi
          
          STATUS=$(gh pr checks $PR_NUMBER --json state -q '.[].state' | grep -v success || true)
          if [ -z "$STATUS" ]; then
            echo "ci_passed=true" >> $GITHUB_OUTPUT
          else
            echo "ci_passed=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Determine merge eligibility
        id: merge-eligibility
        run: |
          UPDATE_TYPE="${{ steps.dependabot.outputs.update-type }}"
          DEP_TYPE="${{ steps.dependabot.outputs.dependency-type }}"
          PACKAGE="${{ steps.dependabot.outputs.dependency-names }}"
          CI_PASSED="${{ steps.ci-status.outputs.ci_passed }}"
          
          # Default to not merging
          SHOULD_MERGE="false"
          MERGE_METHOD="merge"
          
          # Check if CI passed
          if [ "$CI_PASSED" != "true" ]; then
            echo "CI has not passed yet"
            echo "should_merge=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Auto-merge rules
          case "$UPDATE_TYPE" in
            "version-update:semver-patch")
              SHOULD_MERGE="true"
              echo "‚úÖ Patch update - will auto-merge"
              ;;
            "version-update:semver-minor")
              if [ "$DEP_TYPE" == "direct:development" ]; then
                SHOULD_MERGE="true"
                echo "‚úÖ Minor dev dependency update - will auto-merge"
              else
                echo "‚ö†Ô∏è Minor production dependency - requires manual review"
              fi
              ;;
            "version-update:semver-major")
              echo "‚ùå Major update - requires manual review"
              ;;
          esac
          
          # Check for excluded packages
          EXCLUDED_PACKAGES="typescript jest turbo @types/"
          for EXCLUDED in $EXCLUDED_PACKAGES; do
            if [[ "$PACKAGE" == *"$EXCLUDED"* ]]; then
              SHOULD_MERGE="false"
              echo "‚ùå Package $PACKAGE is in exclusion list"
              break
            fi
          done
          
          echo "should_merge=$SHOULD_MERGE" >> $GITHUB_OUTPUT
          echo "merge_method=$MERGE_METHOD" >> $GITHUB_OUTPUT
          
      - name: Auto-approve eligible PRs
        if: steps.merge-eligibility.outputs.should_merge == 'true'
        run: |
          gh pr review --approve "${{ github.event.pull_request.html_url }}" \
            --body "ü§ñ **Automated review**: This ${{ steps.dependabot.outputs.update-type }} update meets auto-merge criteria."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Enable auto-merge
        if: steps.merge-eligibility.outputs.should_merge == 'true'
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"
          MERGE_METHOD="${{ steps.merge-eligibility.outputs.merge_method }}"
          
          echo "Enabling auto-merge for $PR_URL with method: $MERGE_METHOD"
          gh pr merge --auto --$MERGE_METHOD "$PR_URL"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Add labels
        if: always()
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"
          UPDATE_TYPE="${{ steps.dependabot.outputs.update-type }}"
          
          # Add update type label
          case "$UPDATE_TYPE" in
            "version-update:semver-patch")
              gh pr edit "$PR_URL" --add-label "patch-update"
              ;;
            "version-update:semver-minor")
              gh pr edit "$PR_URL" --add-label "minor-update"
              ;;
            "version-update:semver-major")
              gh pr edit "$PR_URL" --add-label "major-update,requires-manual-review"
              ;;
          esac
          
          # Add auto-merge label if applicable
          if [ "${{ steps.merge-eligibility.outputs.should_merge }}" == "true" ]; then
            gh pr edit "$PR_URL" --add-label "auto-merge-enabled"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Comment merge decision
        if: always()
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"
          UPDATE_TYPE="${{ steps.dependabot.outputs.update-type }}"
          SHOULD_MERGE="${{ steps.merge-eligibility.outputs.should_merge }}"
          PACKAGE="${{ steps.dependabot.outputs.dependency-names }}"
          
          if [ "$SHOULD_MERGE" == "true" ]; then
            COMMENT="ü§ñ **Auto-merge enabled** for this $UPDATE_TYPE update of \`$PACKAGE\`.
            
This PR will be automatically merged once all CI checks pass."
          else
            COMMENT="üîç **Manual review required** for this $UPDATE_TYPE update of \`$PACKAGE\`.
            
Reason: "
            case "$UPDATE_TYPE" in
              "version-update:semver-major")
                COMMENT="${COMMENT}Major version updates may contain breaking changes."
                ;;
              "version-update:semver-minor")
                COMMENT="${COMMENT}Minor production dependency updates require review."
                ;;
              *)
                COMMENT="${COMMENT}This package is in the manual review list or CI checks have not passed."
                ;;
            esac
          fi
          
          # Only comment if we haven't already
          EXISTING_COMMENT=$(gh pr view "$PR_URL" --json comments -q '.comments[].body' | grep "Auto-merge enabled\|Manual review required" || true)
          if [ -z "$EXISTING_COMMENT" ]; then
            gh pr comment "$PR_URL" --body "$COMMENT"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}