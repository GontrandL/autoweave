name: Advanced Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily scan at 2 AM

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write
  attestations: write

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript', 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-extended,security-and-quality
        config-file: ./.github/codeql/codeql-config.yml
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Multi-Layer Dependency Security
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scanner: [trivy, snyk]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: |
        npm install -g pnpm
        pnpm install --frozen-lockfile
    
    - name: Trivy Vulnerability Scanner
      if: matrix.scanner == 'trivy'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'
    
    - name: Snyk Security Scan
      if: matrix.scanner == 'snyk'
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --all-projects --sarif-file-output=snyk-results.sarif
    
    - name: Upload Trivy Results
      if: matrix.scanner == 'trivy' && always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Upload Snyk Results
      if: matrix.scanner == 'snyk' && always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'snyk-results.sarif'

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  container-security:
    name: Container Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        scanner: [trivy, grype]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test Docker image
      run: |
        docker build -t autoweave:test -f Dockerfile .
    
    - name: Trivy Container Scan
      if: matrix.scanner == 'trivy'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'autoweave:test'
        format: 'sarif'
        output: 'container-trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Grype Container Scan
      if: matrix.scanner == 'grype'
      uses: anchore/scan-action@v3
      with:
        image: "autoweave:test"
        severity-cutoff: medium
        output-format: sarif
        output-file: container-grype-results.sarif
    
    - name: Upload Trivy Container Results
      if: matrix.scanner == 'trivy' && always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'container-trivy-results.sarif'
        category: 'container-trivy'
    
    - name: Upload Grype Container Results
      if: matrix.scanner == 'grype' && always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'container-grype-results.sarif'
        category: 'container-grype'

  sbom-generation:
    name: Generate SBOM and Attestations
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install Syft
      uses: anchore/sbom-action/download-syft@v0
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
    
    - name: Build Docker image for SBOM
      run: |
        docker build -t autoweave:sbom .
    
    - name: Generate Software Bill of Materials
      run: |
        # Generate SBOM for source code
        syft . -o spdx-json=sbom.spdx.json
        syft . -o cyclonedx-json=sbom.cyclonedx.json
        
        # Generate SBOM for container image
        syft autoweave:sbom -o spdx-json=container-sbom.spdx.json
        syft autoweave:sbom -o cyclonedx-json=container-sbom.cyclonedx.json
    
    - name: Sign SBOM with Cosign
      run: |
        cosign sign-blob --yes sbom.spdx.json --output-signature sbom.spdx.json.sig
        cosign sign-blob --yes sbom.cyclonedx.json --output-signature sbom.cyclonedx.json.sig
    
    - name: Generate Build Attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: |
          sbom.spdx.json
          sbom.cyclonedx.json
    
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: |
          sbom.spdx.json
          sbom.cyclonedx.json
          container-sbom.spdx.json
          container-sbom.cyclonedx.json
          *.sig

  sonarcloud-scan:
    name: SonarCloud Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: |
        npm install -g pnpm
        pnpm install --frozen-lockfile
    
    - name: Run tests with coverage
      run: pnpm test:coverage
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.qualitygate.wait=true
          -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts
          -Dsonar.security.enable_advanced_sast=true

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: |
        npm install -g pnpm
        pnpm install --frozen-lockfile
    
    - name: License Check
      run: |
        npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;CC0-1.0;Unlicense' --summary