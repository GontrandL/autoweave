name: Secret Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run secret scanning daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better detection

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: TruffleHog Enterprise
        if: ${{ github.event_name == 'pull_request' }}
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          extra_args: --debug --only-verified

  gitleaks:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  detect-secrets:
    name: Detect Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets --version

      - name: Run detect-secrets
        run: |
          detect-secrets scan --baseline .secrets.baseline
          detect-secrets audit .secrets.baseline

      - name: Upload baseline
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: secrets-baseline
          path: .secrets.baseline

  custom-patterns:
    name: Custom Pattern Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential secrets..."
          
          # Check for common secret patterns
          patterns=(
            "password\s*[:=]\s*[\"'][^\"']{8,}[\"']"
            "api[_-]?key\s*[:=]\s*[\"'][^\"']{20,}[\"']"
            "secret\s*[:=]\s*[\"'][^\"']{8,}[\"']"
            "token\s*[:=]\s*[\"'][^\"']{20,}[\"']"
            "private[_-]?key"
            "BEGIN\s+(RSA|DSA|EC|OPENSSH)\s+PRIVATE\s+KEY"
            "aws_access_key_id"
            "aws_secret_access_key"
            "AKIA[0-9A-Z]{16}"
          )
          
          found_secrets=false
          
          for pattern in "${patterns[@]}"; do
            echo "Checking pattern: $pattern"
            if grep -rEi "$pattern" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --include="*.json" --include="*.yml" --include="*.yaml" --include="*.env*" --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=dist --exclude-dir=build .; then
              echo "WARNING: Potential secret found with pattern: $pattern"
              found_secrets=true
            fi
          done
          
          if [ "$found_secrets" = true ]; then
            echo "::warning::Potential secrets detected. Please review and remove any hardcoded secrets."
            exit 1
          fi
          
          echo "No obvious secrets detected."

  create-baseline:
    name: Create Secret Baseline
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install detect-secrets
        run: pip install detect-secrets

      - name: Create baseline if not exists
        run: |
          if [ ! -f .secrets.baseline ]; then
            detect-secrets scan > .secrets.baseline
            echo "Created new secrets baseline"
          else
            echo "Secrets baseline already exists"
          fi

      - name: Commit baseline
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .secrets.baseline
          git diff --staged --quiet || git commit -m "chore: update secrets baseline [skip ci]"
          git push || echo "No changes to push"