name: Frontend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['apps/**', 'packages/ui/**', 'packages/graphql/**', 'packages/auth/**']
  pull_request:
    branches: [main]
    paths: ['apps/**', 'packages/ui/**', 'packages/graphql/**', 'packages/auth/**']

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm type-check

      - name: Test
        run: pnpm test

      - name: Build packages
        run: pnpm build:packages

      - name: Build applications
        run: pnpm build:apps

  lighthouse:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm build:apps

      - name: Start applications
        run: |
          pnpm start:admin &
          pnpm start:studio &
          pnpm start:user &
          sleep 30

      - name: Run Lighthouse CI
        run: pnpm lighthouse:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit

      - name: Check for vulnerable packages
        run: pnpm audit --audit-level moderate

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lighthouse, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Admin UI
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          target: admin-ui
          push: true
          tags: ghcr.io/${{ github.repository }}/admin-ui:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Dev Studio
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          target: dev-studio
          push: true
          tags: ghcr.io/${{ github.repository }}/dev-studio:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push User UI
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          target: user-ui
          push: true
          tags: ghcr.io/${{ github.repository }}/user-ui:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to production..."
          # Add your deployment steps here
          # kubectl apply -f k8s/frontend/
          # helm upgrade autoweave-frontend ./charts/frontend