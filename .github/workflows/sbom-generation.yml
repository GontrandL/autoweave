name: SBOM Generation and Security Analysis

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    # Generate SBOM weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [spdx-json, cyclonedx-json, syft-json]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0
        with:
          syft-version: latest

      - name: Generate SBOM for source code
        run: |
          syft . -o ${{ matrix.format }}=sbom-source.${{ matrix.format }}

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.format }}
          path: sbom-source.${{ matrix.format }}
          retention-days: 30

  docker-sbom:
    name: Generate Docker Image SBOM
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    strategy:
      matrix:
        image:
          - autoweave-core
          - autoweave-backend
          - autoweave-memory
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ matrix.image }}:${{ github.sha }} .

      - name: Generate SBOM for Docker image
        uses: anchore/sbom-action@v0
        with:
          image: ${{ matrix.image }}:${{ github.sha }}
          format: spdx-json
          output-file: ./sbom-docker-${{ matrix.image }}.spdx.json

      - name: Upload Docker SBOM
        uses: actions/upload-artifact@v3
        with:
          name: docker-sbom-${{ matrix.image }}
          path: ./sbom-docker-${{ matrix.image }}.spdx.json

  analyze-vulnerabilities:
    name: Analyze SBOM for Vulnerabilities
    runs-on: ubuntu-latest
    needs: generate-sbom
    steps:
      - name: Download SBOM artifacts
        uses: actions/download-artifact@v3
        with:
          name: sbom-spdx-json

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan for vulnerabilities
        run: |
          grype sbom:./sbom-source.spdx-json -o json > vulnerabilities.json
          grype sbom:./sbom-source.spdx-json -o table > vulnerabilities.txt

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-report
          path: |
            vulnerabilities.json
            vulnerabilities.txt

      - name: Create vulnerability summary
        run: |
          echo "## Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          grype sbom:./sbom-source.spdx-json -o table >> $GITHUB_STEP_SUMMARY

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    needs: generate-sbom
    steps:
      - name: Download SBOM artifacts
        uses: actions/download-artifact@v3
        with:
          name: sbom-cyclonedx-json

      - name: Install license checker
        run: |
          npm install -g @cyclonedx/cdxgen
          npm install -g license-checker-rseidelsohn

      - name: Check license compliance
        run: |
          # Extract licenses from SBOM
          echo "Checking license compliance..."
          cat sbom-source.cyclonedx-json | jq -r '.components[].licenses[]?.license.id // .components[].licenses[]?.license.name' | sort | uniq > licenses.txt
          
          # Check for problematic licenses
          problematic_licenses=("GPL" "AGPL" "LGPL" "SSPL" "Commons-Clause")
          found_issues=false
          
          for license in "${problematic_licenses[@]}"; do
            if grep -i "$license" licenses.txt; then
              echo "::warning::Found potentially problematic license: $license"
              found_issues=true
            fi
          done
          
          if [ "$found_issues" = true ]; then
            echo "::warning::Please review license compliance before proceeding."
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.txt

  sign-sbom:
    name: Sign SBOM with Cosign
    runs-on: ubuntu-latest
    needs: generate-sbom
    if: github.event_name == 'release'
    steps:
      - name: Download SBOM artifacts
        uses: actions/download-artifact@v3
        with:
          name: sbom-spdx-json

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign SBOM
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign-blob --yes sbom-source.spdx-json > sbom-source.spdx-json.sig

      - name: Upload signed SBOM
        uses: actions/upload-artifact@v3
        with:
          name: signed-sbom
          path: |
            sbom-source.spdx-json
            sbom-source.spdx-json.sig

  publish-sbom:
    name: Publish SBOM to Release
    runs-on: ubuntu-latest
    needs: [generate-sbom, sign-sbom]
    if: github.event_name == 'release'
    steps:
      - name: Download all SBOM artifacts
        uses: actions/download-artifact@v3

      - name: Create SBOM archive
        run: |
          mkdir sbom-release
          cp sbom-*/*.* sbom-release/
          cp signed-sbom/*.* sbom-release/
          tar -czf autoweave-sbom-${{ github.ref_name }}.tar.gz sbom-release/

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            autoweave-sbom-${{ github.ref_name }}.tar.gz
            sbom-release/sbom-source.spdx-json
            sbom-release/sbom-source.spdx-json.sig