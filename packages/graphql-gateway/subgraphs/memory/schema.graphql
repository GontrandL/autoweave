extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@key", "@shareable", "@provides", "@requires", "@external", "@tag", "@inaccessible"])

type Query {
  memories(tenantId: String, namespace: String): [Memory!]! @auth(requires: ["memory:read"])
  memory(id: ID!): Memory @auth(requires: ["memory:read"], tenantIsolated: true)
  searchMemories(query: String!, namespace: String, limit: Int = 10): [Memory!]! @auth(requires: ["memory:read"])
  memorySimilarity(memoryId: ID!, threshold: Float = 0.8): [Memory!]! @auth(requires: ["memory:read"])
  memoryStats(tenantId: String): MemoryStats! @auth(requires: ["memory:read"])
  memoryNamespaces(tenantId: String): [MemoryNamespace!]! @auth(requires: ["memory:read"])
}

type Mutation {
  createMemory(input: CreateMemoryInput!): Memory! @auth(requires: ["memory:write"])
  updateMemory(id: ID!, input: UpdateMemoryInput!): Memory! @auth(requires: ["memory:write"], tenantIsolated: true)
  deleteMemory(id: ID!): Boolean! @auth(requires: ["memory:delete"], tenantIsolated: true)
  bulkCreateMemories(input: [CreateMemoryInput!]!): [Memory!]! @auth(requires: ["memory:write"])
  bulkDeleteMemories(ids: [ID!]!): Int! @auth(requires: ["memory:delete"])
  createMemoryNamespace(input: CreateMemoryNamespaceInput!): MemoryNamespace! @auth(requires: ["memory:write"])
  deleteMemoryNamespace(id: ID!): Boolean! @auth(requires: ["memory:delete"], tenantIsolated: true)
  optimizeMemoryIndex(namespace: String): Boolean! @auth(requires: ["memory:write"])
}

type Subscription {
  memoryAdded(namespace: String): Memory! @auth(requires: ["memory:read"])
  memoryUpdated(namespace: String): Memory! @auth(requires: ["memory:read"])
  memoryDeleted(namespace: String): ID! @auth(requires: ["memory:read"])
}

type Memory @key(fields: "id") {
  id: ID!
  content: String!
  namespace: String!
  metadata: JSON!
  embedding: [Float!]!
  similarity: Float @external
  tenantId: String!
  userId: String!
  agentId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  accessedAt: DateTime!
  accessCount: Int!
  tags: [String!]!
  isActive: Boolean!
  vectorId: String
  source: MemorySource!
  type: MemoryType!
}

type MemoryNamespace @key(fields: "id") {
  id: ID!
  name: String!
  description: String
  tenantId: String!
  settings: MemoryNamespaceSettings!
  stats: MemoryNamespaceStats!
  createdAt: DateTime!
  updatedAt: DateTime!
  isActive: Boolean!
  memories: [Memory!]!
}

type MemoryNamespaceSettings {
  maxMemories: Int!
  embeddingModel: String!
  similarityThreshold: Float!
  autoCleanup: Boolean!
  retentionDays: Int!
}

type MemoryNamespaceStats {
  totalMemories: Int!
  totalSize: Float!
  avgSimilarity: Float!
  lastAccessed: DateTime
  topTags: [String!]!
}

type MemoryStats {
  totalMemories: Int!
  totalSize: Float!
  namespacesCount: Int!
  avgAccessCount: Float!
  memoryDistribution: [MemoryDistribution!]!
  recentActivity: [MemoryActivity!]!
}

type MemoryDistribution {
  namespace: String!
  count: Int!
  percentage: Float!
}

type MemoryActivity {
  action: MemoryAction!
  memoryId: ID!
  timestamp: DateTime!
  userId: String!
  metadata: JSON
}

type MemorySource {
  type: SourceType!
  url: String
  filename: String
  agentId: String
  jobId: String
  metadata: JSON
}

input CreateMemoryInput {
  content: String!
  namespace: String!
  metadata: JSON = {}
  tags: [String!] = []
  agentId: String
  source: MemorySourceInput!
  type: MemoryType!
}

input UpdateMemoryInput {
  content: String
  metadata: JSON
  tags: [String!]
  isActive: Boolean
}

input CreateMemoryNamespaceInput {
  name: String!
  description: String
  settings: MemoryNamespaceSettingsInput!
}

input MemoryNamespaceSettingsInput {
  maxMemories: Int! = 10000
  embeddingModel: String! = "text-embedding-ada-002"
  similarityThreshold: Float! = 0.8
  autoCleanup: Boolean! = true
  retentionDays: Int! = 30
}

input MemorySourceInput {
  type: SourceType!
  url: String
  filename: String
  agentId: String
  jobId: String
  metadata: JSON = {}
}

enum MemoryType {
  TEXT
  CODE
  DOCUMENT
  CONVERSATION
  KNOWLEDGE
  CACHE
  EMBEDDING
}

enum SourceType {
  AGENT
  USER
  SYSTEM
  EXTERNAL
  UPLOAD
  SCRAPE
  API
}

enum MemoryAction {
  CREATED
  UPDATED
  DELETED
  ACCESSED
  SEARCHED
}

scalar DateTime
scalar JSON