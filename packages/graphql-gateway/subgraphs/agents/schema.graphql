extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@key", "@shareable", "@provides", "@requires", "@external", "@tag", "@inaccessible"])

type Query {
  agents(tenantId: String, status: AgentStatus): [Agent!]! @auth(requires: ["agents:read"])
  agent(id: ID!): Agent @auth(requires: ["agents:read"], tenantIsolated: true)
  agentMetrics(agentId: ID!): AgentMetrics @auth(requires: ["agents:read", "observability:read"])
  agentLogs(agentId: ID!, limit: Int = 100): [AgentLog!]! @auth(requires: ["agents:read", "observability:read"])
}

type Mutation {
  createAgent(input: CreateAgentInput!): Agent! @auth(requires: ["agents:create"])
  updateAgent(id: ID!, input: UpdateAgentInput!): Agent! @auth(requires: ["agents:update"], tenantIsolated: true)
  deleteAgent(id: ID!): Boolean! @auth(requires: ["agents:delete"], tenantIsolated: true)
  deployAgent(id: ID!): AgentDeployment! @auth(requires: ["agents:deploy"], tenantIsolated: true)
  startAgent(id: ID!): Agent! @auth(requires: ["agents:update"], tenantIsolated: true)
  stopAgent(id: ID!): Agent! @auth(requires: ["agents:update"], tenantIsolated: true)
  restartAgent(id: ID!): Agent! @auth(requires: ["agents:update"], tenantIsolated: true)
}

type Subscription {
  agentStatusChanged(agentId: ID!): Agent! @auth(requires: ["agents:read"], tenantIsolated: true)
  agentLogsStream(agentId: ID!): AgentLog! @auth(requires: ["agents:read", "observability:read"])
}

type Agent @key(fields: "id") {
  id: ID!
  name: String!
  description: String
  type: AgentType!
  status: AgentStatus!
  version: String!
  config: AgentConfig!
  secrets: [AgentSecret!]! @auth(requires: ["agents:update"])
  tenantId: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  lastDeployedAt: DateTime
  deployments: [AgentDeployment!]!
  metrics: AgentMetrics @provides(fields: "cpuUsage memoryUsage")
  logs: [AgentLog!]!
  tags: [String!]!
  isActive: Boolean!
  healthStatus: HealthStatus!
}

type AgentConfig {
  runtime: String!
  memory: String!
  cpu: String!
  environment: [EnvironmentVariable!]!
  ports: [Port!]!
  volumes: [Volume!]!
  dependencies: [Dependency!]!
  scaling: ScalingConfig!
}

type AgentSecret {
  key: String!
  value: String! @auth(requires: ["agents:update"])
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AgentDeployment @key(fields: "id") {
  id: ID!
  agentId: ID!
  agent: Agent!
  version: String!
  status: DeploymentStatus!
  replicas: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  logs: [DeploymentLog!]!
}

type AgentMetrics @key(fields: "agentId") {
  agentId: ID!
  agent: Agent! @external
  cpuUsage: Float!
  memoryUsage: Float!
  networkIn: Float!
  networkOut: Float!
  requestCount: Int!
  errorCount: Int!
  uptime: Float!
  timestamp: DateTime!
}

type AgentLog {
  id: ID!
  agentId: ID!
  level: LogLevel!
  message: String!
  timestamp: DateTime!
  metadata: JSON
}

type DeploymentLog {
  id: ID!
  deploymentId: ID!
  level: LogLevel!
  message: String!
  timestamp: DateTime!
  source: String!
}

type EnvironmentVariable {
  key: String!
  value: String!
  isSecret: Boolean!
}

type Port {
  name: String!
  port: Int!
  protocol: String!
  targetPort: Int!
}

type Volume {
  name: String!
  mountPath: String!
  size: String!
  type: VolumeType!
}

type Dependency {
  name: String!
  version: String!
  type: DependencyType!
  repository: String
}

type ScalingConfig {
  minReplicas: Int!
  maxReplicas: Int!
  targetCPU: Int!
  targetMemory: Int!
}

input CreateAgentInput {
  name: String!
  description: String
  type: AgentType!
  config: AgentConfigInput!
  secrets: [AgentSecretInput!]
  tags: [String!]
}

input UpdateAgentInput {
  name: String
  description: String
  config: AgentConfigInput
  secrets: [AgentSecretInput!]
  tags: [String!]
}

input AgentConfigInput {
  runtime: String!
  memory: String!
  cpu: String!
  environment: [EnvironmentVariableInput!]!
  ports: [PortInput!]!
  volumes: [VolumeInput!]!
  dependencies: [DependencyInput!]!
  scaling: ScalingConfigInput!
}

input AgentSecretInput {
  key: String!
  value: String!
}

input EnvironmentVariableInput {
  key: String!
  value: String!
  isSecret: Boolean! = false
}

input PortInput {
  name: String!
  port: Int!
  protocol: String! = "TCP"
  targetPort: Int
}

input VolumeInput {
  name: String!
  mountPath: String!
  size: String!
  type: VolumeType!
}

input DependencyInput {
  name: String!
  version: String!
  type: DependencyType!
  repository: String
}

input ScalingConfigInput {
  minReplicas: Int! = 1
  maxReplicas: Int! = 10
  targetCPU: Int! = 80
  targetMemory: Int! = 80
}

enum AgentType {
  WORKFLOW
  INTEGRATION
  MONITORING
  SECURITY
  CUSTOM
}

enum AgentStatus {
  CREATED
  BUILDING
  DEPLOYING
  RUNNING
  STOPPED
  ERROR
  DELETING
}

enum DeploymentStatus {
  PENDING
  RUNNING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum HealthStatus {
  HEALTHY
  UNHEALTHY
  UNKNOWN
}

enum VolumeType {
  PERSISTENT
  EPHEMERAL
  CONFIG_MAP
  SECRET
}

enum DependencyType {
  PACKAGE
  CONTAINER
  SERVICE
  DATABASE
}

scalar DateTime
scalar JSON