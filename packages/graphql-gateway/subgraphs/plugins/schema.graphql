extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@key", "@shareable", "@provides", "@requires", "@external", "@tag", "@inaccessible"])

type Query {
  plugins(tenantId: String, status: PluginStatus): [Plugin!]! @auth(requires: ["plugins:read"])
  plugin(id: ID!): Plugin @auth(requires: ["plugins:read"], tenantIsolated: true)
  pluginRegistry: [PluginRegistryEntry!]! @auth(requires: ["plugins:read"])
  pluginManifest(id: ID!): PluginManifest @auth(requires: ["plugins:read"])
  pluginPermissions(id: ID!): [PluginPermission!]! @auth(requires: ["plugins:read"])
  pluginMetrics(id: ID!): PluginMetrics @auth(requires: ["plugins:read"])
  pluginDependencies(id: ID!): [PluginDependency!]! @auth(requires: ["plugins:read"])
  pluginMarketplace(category: String, search: String): [MarketplacePlugin!]! @auth(requires: ["plugins:read"])
}

type Mutation {
  installPlugin(input: InstallPluginInput!): Plugin! @auth(requires: ["plugins:install"])
  uninstallPlugin(id: ID!): Boolean! @auth(requires: ["plugins:uninstall"], tenantIsolated: true)
  updatePlugin(id: ID!, input: UpdatePluginInput!): Plugin! @auth(requires: ["plugins:install"], tenantIsolated: true)
  enablePlugin(id: ID!): Plugin! @auth(requires: ["plugins:install"], tenantIsolated: true)
  disablePlugin(id: ID!): Plugin! @auth(requires: ["plugins:install"], tenantIsolated: true)
  configurePlugin(id: ID!, config: JSON!): Plugin! @auth(requires: ["plugins:install"], tenantIsolated: true)
  grantPluginPermission(id: ID!, permission: String!): Boolean! @auth(requires: ["plugins:install"], tenantIsolated: true)
  revokePluginPermission(id: ID!, permission: String!): Boolean! @auth(requires: ["plugins:install"], tenantIsolated: true)
  publishPlugin(input: PublishPluginInput!): MarketplacePlugin! @auth(requires: ["plugins:install"])
  unpublishPlugin(id: ID!): Boolean! @auth(requires: ["plugins:install"], tenantIsolated: true)
  validatePlugin(source: String!): PluginValidationResult! @auth(requires: ["plugins:install"])
}

type Subscription {
  pluginStatusChanged(tenantId: String): Plugin! @auth(requires: ["plugins:read"])
  pluginInstalled(tenantId: String): Plugin! @auth(requires: ["plugins:read"])
  pluginUninstalled(tenantId: String): ID! @auth(requires: ["plugins:read"])
}

type Plugin @key(fields: "id") {
  id: ID!
  name: String!
  description: String!
  version: String!
  author: String!
  homepage: String
  repository: String
  license: String!
  status: PluginStatus!
  category: PluginCategory!
  tags: [String!]!
  manifest: PluginManifest!
  config: JSON!
  permissions: [PluginPermission!]!
  dependencies: [PluginDependency!]!
  metrics: PluginMetrics!
  tenantId: String!
  installedBy: String!
  installedAt: DateTime!
  updatedAt: DateTime!
  lastUsed: DateTime
  usageCount: Int!
  isEnabled: Boolean!
  isSystem: Boolean!
  isVerified: Boolean!
  source: PluginSource!
  checksum: String!
  size: Int!
  supportedPlatforms: [String!]!
  minVersion: String
  maxVersion: String
  screenshots: [String!]!
  documentation: String
  changelog: String
}

type PluginManifest {
  name: String!
  version: String!
  description: String!
  author: String!
  license: String!
  homepage: String
  repository: String
  bugs: String
  keywords: [String!]!
  main: String!
  runtime: PluginRuntime!
  permissions: [String!]!
  dependencies: [ManifestDependency!]!
  engines: JSON!
  scripts: JSON
  config: JSON
  hooks: [PluginHook!]!
  api: [PluginAPI!]!
  ui: PluginUI
  security: PluginSecurity!
  metadata: JSON
}

type PluginPermission {
  name: String!
  description: String!
  type: PermissionType!
  level: PermissionLevel!
  granted: Boolean!
  grantedBy: String
  grantedAt: DateTime
  conditions: JSON
}

type PluginDependency {
  name: String!
  version: String!
  type: DependencyType!
  optional: Boolean!
  installed: Boolean!
  availableVersion: String
  repository: String
  license: String
}

type PluginMetrics {
  pluginId: ID!
  installCount: Int!
  activeUsers: Int!
  usageCount: Int!
  errorCount: Int!
  avgResponseTime: Float!
  cpuUsage: Float!
  memoryUsage: Float!
  diskUsage: Float!
  networkUsage: Float!
  lastUsed: DateTime
  uptime: Float!
  performance: PluginPerformance!
  errors: [PluginError!]!
}

type PluginPerformance {
  avgExecutionTime: Float!
  minExecutionTime: Float!
  maxExecutionTime: Float!
  p95ExecutionTime: Float!
  p99ExecutionTime: Float!
  throughput: Float!
  errorRate: Float!
}

type PluginError {
  timestamp: DateTime!
  message: String!
  stack: String
  level: ErrorLevel!
  context: JSON
}

type PluginSource {
  type: SourceType!
  url: String!
  branch: String
  commit: String
  tag: String
  credentials: JSON
}

type PluginHook {
  event: String!
  handler: String!
  priority: Int!
  async: Boolean!
}

type PluginAPI {
  path: String!
  method: String!
  handler: String!
  middleware: [String!]!
  auth: Boolean!
  rateLimit: Int
  documentation: String
}

type PluginUI {
  type: UIType!
  entrypoint: String!
  routes: [UIRoute!]!
  components: [UIComponent!]!
  assets: [String!]!
  permissions: [String!]!
}

type UIRoute {
  path: String!
  component: String!
  exact: Boolean!
  permissions: [String!]!
}

type UIComponent {
  name: String!
  type: ComponentType!
  props: JSON
  permissions: [String!]!
}

type PluginSecurity {
  sandboxed: Boolean!
  permissions: [String!]!
  allowedDomains: [String!]!
  allowedIPs: [String!]!
  resourceLimits: ResourceLimits!
  contentSecurityPolicy: String
}

type ResourceLimits {
  memory: String!
  cpu: String!
  disk: String!
  network: String!
  timeout: Int!
}

type ManifestDependency {
  name: String!
  version: String!
  type: DependencyType!
  optional: Boolean!
  repository: String
}

type PluginRegistryEntry {
  name: String!
  version: String!
  description: String!
  author: String!
  category: PluginCategory!
  tags: [String!]!
  downloadCount: Int!
  rating: Float!
  lastUpdated: DateTime!
  verified: Boolean!
  source: String!
  license: String!
  documentation: String
  screenshots: [String!]!
}

type MarketplacePlugin {
  id: ID!
  name: String!
  description: String!
  version: String!
  author: String!
  category: PluginCategory!
  tags: [String!]!
  downloadCount: Int!
  rating: Float!
  reviews: [PluginReview!]!
  screenshots: [String!]!
  documentation: String!
  changelog: String
  price: Float!
  currency: String!
  license: String!
  source: String!
  verified: Boolean!
  featured: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  compatibility: [String!]!
  supportedPlatforms: [String!]!
  minVersion: String
  maxVersion: String
}

type PluginReview {
  id: ID!
  pluginId: ID!
  userId: String!
  rating: Float!
  title: String!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  helpful: Int!
  verified: Boolean!
}

type PluginValidationResult {
  valid: Boolean!
  errors: [ValidationError!]!
  warnings: [ValidationWarning!]!
  manifest: PluginManifest
  security: SecurityAnalysis!
  performance: PerformanceAnalysis!
}

type ValidationError {
  field: String!
  message: String!
  code: String!
}

type ValidationWarning {
  field: String!
  message: String!
  code: String!
}

type SecurityAnalysis {
  score: Float!
  issues: [SecurityIssue!]!
  recommendations: [String!]!
}

type SecurityIssue {
  severity: SecuritySeverity!
  type: String!
  description: String!
  recommendation: String!
}

type PerformanceAnalysis {
  score: Float!
  issues: [PerformanceIssue!]!
  recommendations: [String!]!
}

type PerformanceIssue {
  severity: PerformanceSeverity!
  type: String!
  description: String!
  recommendation: String!
}

input InstallPluginInput {
  source: String!
  version: String
  config: JSON = {}
  permissions: [String!] = []
  autoEnable: Boolean = true
}

input UpdatePluginInput {
  version: String
  config: JSON
  permissions: [String!]
}

input PublishPluginInput {
  name: String!
  description: String!
  version: String!
  category: PluginCategory!
  tags: [String!]!
  source: String!
  license: String!
  documentation: String
  screenshots: [String!]
  price: Float = 0
  currency: String = "USD"
}

enum PluginStatus {
  INSTALLING
  INSTALLED
  ENABLED
  DISABLED
  UPDATING
  UNINSTALLING
  ERROR
  SUSPENDED
}

enum PluginCategory {
  AUTOMATION
  INTEGRATION
  MONITORING
  SECURITY
  PRODUCTIVITY
  DEVELOPMENT
  ANALYTICS
  COMMUNICATION
  STORAGE
  UTILITY
  CUSTOM
}

enum PluginRuntime {
  NODEJS
  PYTHON
  GOLANG
  RUST
  JAVA
  DOTNET
  WASM
  NATIVE
}

enum PermissionType {
  SYSTEM
  RESOURCE
  NETWORK
  FILESYSTEM
  DATABASE
  API
  UI
  WEBHOOK
}

enum PermissionLevel {
  READ
  WRITE
  ADMIN
  OWNER
}

enum DependencyType {
  RUNTIME
  PLUGIN
  LIBRARY
  SERVICE
  TOOL
}

enum SourceType {
  GIT
  NPM
  DOCKER
  HTTP
  LOCAL
  MARKETPLACE
}

enum UIType {
  REACT
  VUE
  ANGULAR
  STATIC
  IFRAME
}

enum ComponentType {
  WIDGET
  PANEL
  MODAL
  PAGE
  SIDEBAR
  TOOLBAR
}

enum ErrorLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PerformanceSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

scalar DateTime
scalar JSON