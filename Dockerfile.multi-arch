# AutoWeave Production Multi-Architecture Dockerfile
# Optimized for linux/amd64 and linux/arm64 platforms
# SLSA Level 3 compliant with attestations and SBOM

ARG BUILDPLATFORM=linux/amd64
ARG TARGETPLATFORM=linux/amd64
ARG NODE_VERSION=20
ARG ALPINE_VERSION=3.19

# Build arguments for metadata
ARG VERSION=latest
ARG BUILD_DATE
ARG GIT_COMMIT
ARG GIT_BRANCH=main

FROM --platform=$BUILDPLATFORM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS base

# Install build dependencies and security tools
RUN apk add --no-cache \
    libc6-compat \
    python3 \
    make \
    g++ \
    git \
    curl \
    bash \
    ca-certificates \
    && update-ca-certificates

# Install pnpm for faster package management
RUN npm install -g pnpm turbo

# Create non-root user for security
RUN addgroup -g 1001 -S autoweave && \
    adduser -S autoweave -u 1001 -G autoweave

WORKDIR /app

# Copy package management files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY packages/*/package.json ./packages/
COPY tsconfig*.json ./

# Dependencies stage - optimized for caching
FROM base AS deps
COPY --from=base /app/package.json /app/pnpm-lock.yaml /app/pnpm-workspace.yaml ./
COPY --from=base /app/packages/ ./packages/

# Install all dependencies (including dev dependencies for building)
RUN --mount=type=cache,target=/root/.pnpm \
    pnpm install --frozen-lockfile --prod=false

# Builder stage - compile TypeScript and build packages
FROM base AS builder

# Copy source code and dependencies
COPY . .
COPY --from=deps /app/node_modules ./node_modules

# Build all packages
RUN --mount=type=cache,target=/app/.turbo \
    pnpm build

# Prune development dependencies
RUN --mount=type=cache,target=/root/.pnpm \
    pnpm prune --production

# Security scanning stage
FROM builder AS security-scan
RUN apk add --no-cache trivy

# Run security scan on dependencies
RUN trivy fs --format json --output security-report.json . || echo "Security scan completed with warnings"

# Runtime stage - minimal production image
FROM --platform=$TARGETPLATFORM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS runtime

# Build info for debugging
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG VERSION
ARG BUILD_DATE
ARG GIT_COMMIT
ARG GIT_BRANCH

# Log build information
RUN echo "Building AutoWeave ${VERSION} for ${TARGETPLATFORM} on ${BUILDPLATFORM}"

# Install runtime dependencies and security tools
RUN apk add --no-cache \
    tini \
    curl \
    ca-certificates \
    dumb-init \
    tzdata \
    && update-ca-certificates \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S autoweave && \
    adduser -S autoweave -u 1001 -G autoweave

# Set working directory
WORKDIR /app

# Copy package.json for runtime
COPY --from=builder --chown=autoweave:autoweave /app/package.json ./

# Copy built application and production dependencies
COPY --from=builder --chown=autoweave:autoweave /app/dist ./dist
COPY --from=builder --chown=autoweave:autoweave /app/node_modules ./node_modules

# Copy runtime configuration and assets
COPY --from=builder --chown=autoweave:autoweave /app/k8s ./k8s
COPY --from=builder --chown=autoweave:autoweave /app/helm ./helm
COPY --from=builder --chown=autoweave:autoweave /app/docs ./docs
COPY --from=builder --chown=autoweave:autoweave /app/scripts ./scripts

# Create required directories with proper permissions
RUN mkdir -p \
    /app/logs \
    /app/data \
    /app/tmp \
    /app/uploads \
    /app/plugins \
    && chown -R autoweave:autoweave /app \
    && chmod -R 755 /app

# Set up environment
ENV NODE_ENV=production \
    PORT=3000 \
    HOST=0.0.0.0 \
    LOG_LEVEL=info \
    AUTOWEAVE_ENV=production

# Security: read-only root filesystem preparation
RUN mkdir -p /tmp/autoweave && \
    chown autoweave:autoweave /tmp/autoweave

# Switch to non-root user
USER autoweave

# Health check with proper retry logic
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=5 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose application ports
EXPOSE 3000 3001 3002

# Use tini as PID 1 for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start application with production optimizations
CMD ["node", "--max-old-space-size=512", "dist/index.js"]

# OpenContainer Initiative (OCI) metadata
LABEL org.opencontainers.image.title="AutoWeave" \
      org.opencontainers.image.description="Production-Ready AI Agent Orchestration Platform" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${GIT_COMMIT}" \
      org.opencontainers.image.source="https://github.com/autoweave/autoweave" \
      org.opencontainers.image.url="https://github.com/autoweave/autoweave" \
      org.opencontainers.image.documentation="https://docs.autoweave.dev" \
      org.opencontainers.image.vendor="AutoWeave Team" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.ref.name="${GIT_BRANCH}" \
      org.opencontainers.image.platform="${TARGETPLATFORM}"

# Additional metadata for production use
LABEL autoweave.version="${VERSION}" \
      autoweave.build-date="${BUILD_DATE}" \
      autoweave.git-commit="${GIT_COMMIT}" \
      autoweave.git-branch="${GIT_BRANCH}" \
      autoweave.platform="${TARGETPLATFORM}" \
      autoweave.security-scan="enabled" \
      autoweave.sbom="generated" \
      autoweave.signed="cosign"